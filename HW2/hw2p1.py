# -*- coding: utf-8 -*-
"""HW2P1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oGLlJW98XD4GxNiH83NZGeaMN0gVEFqU
"""

import numpy as np
import matplotlib.pyplot as plt
from keras.datasets import mnist

(train_images_original, train_labels_original), (test_images_original, test_labels_original) = mnist.load_data()

train_images = train_images_original.reshape((60000, 28 , 28))
train_images = train_images.astype('float64') / 255

test_images = test_images_original.reshape((10000, 28 , 28))
test_images = test_images.astype('float64') / 255

#averages = np.zeros((1,56))
#averagesArrayTraining = np.zeros((60000,56))
#averagesArrayTest = np.zeros((10000,56))

averages = np.zeros((1,28), dtype='float64')
averagesArrayTraining = np.zeros((60000,29), dtype='float64')
averagesArrayTest = np.zeros((10000,29), dtype='float64')
height = np.zeros((1,1), dtype='float64')

#i = 0
#for data in train_images:
  #averages =  np.concatenate(np.mean(data, axis = 0), np.mean(data, axis = 1))
  #averagesArrayTraining[i] = averages
                                          #Attempt to make both rows and columns features. Attempt has failed
  #i += 1
  

  #Average didnt work, using mean
breakybreak = 0
i = 0
for data in train_images:
  averages =  np.mean(data, axis = 0) + np.mean(data, axis = 1)
  #print(averages)
  max = 0
  min = 0
  for k in range(0,28):
    for j in range(0,28):
      if data[k][j] != 0:
        max = k



        breakybreak = 1
        break
    if breakybreak==1:
      break
  breakybreak = 0;
  for k in reversed(range(28)):
    for j in reversed(range(28)):
      if data[k][j] != 0:
        min = k
        breakybreak = 1
        break
    if breakybreak==1:
      break

  #print("i is " + str(i) + " max is " + str(max)+ " min is " + str(min))

  breakybreak = 0;
  height[0][0] = min - max + 1.00000000000000
  #print(averages)
  tempArr = np.concatenate((averages,height), axis = None)
  averagesArrayTraining[i] = tempArr
  #print(averages)

  i += 1

breakybreak = 0
i = 0
for data in test_images:
  averages =  np.mean(data, axis = 0) + np.mean(data, axis = 1)
  max = 0
  min = 0
  for k in range(0,28):
    for j in range(0,28):
      if data[k][j] != 0:
        max = k
        breakybreak = 1
        break
    if breakybreak==1:
      break
  breakybreak = 0;
  for k in reversed(range(28)):
    for j in reversed(range(28)):
      if data[k][j] != 0:
        min = k
        breakybreak = 1
        break
    if breakybreak==1:
      break
  breakybreak = 0;

  height[0][0] = min - max + 1.00000000000000
  averagesArrayTest[i] = np.concatenate((averages,height),axis = None)
  
  i += 1

from keras.utils import to_categorical

train_labels = to_categorical(train_labels_original)
test_labels = to_categorical(test_labels_original)

averagesArrayTraining.shape

averagesArrayTest.shape

plt.imshow(train_images_original[0])
plt.show()

from keras import models
from keras import layers

network = models.Sequential()
network.add(layers.Dense(512, activation='relu', input_shape=(29,)))
network.add(layers.Dense(10, activation='softmax'))
network.summary()

network.compile(optimizer='adam',
                loss='categorical_crossentropy',
                metrics=['accuracy'])

epochs = 25
history = network.fit(averagesArrayTraining, 
                      train_labels, 
                      epochs=epochs, 
                      batch_size=128, 
                      validation_data=(averagesArrayTest, test_labels))

history_dict = history.history
loss_values = history_dict['loss']
test_loss_values = history_dict['val_loss']
epochs_range = range(1, epochs + 1)

plt.plot(epochs_range, loss_values, 'bo', label='Training loss')
plt.plot(epochs_range, test_loss_values, 'ro', label='Test loss')
plt.title('Training and test loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

acc_values = history_dict['acc']
test_acc_values = history_dict['val_acc']

plt.plot(epochs_range, acc_values, 'bo', label='Training accuracy')
plt.plot(epochs_range, test_acc_values, 'ro', label='Test accuracy')
plt.title('Training and test accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()